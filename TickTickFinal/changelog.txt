>> GameEnvironment.cs - 113

> updates the camera methods
> runs each tick, updates the camera position etc and applies the matrix to the spritescale, only if in the playingstate.

>> Camera.cs
> The camera class
> This class handles everything around the camera, etc, getting data via parameters and returning it via methods.
> Keeps track of level sizes and uses the current level size to determine the total view it can access

>> LevelLoading.cs - 45
> Pass the total level size to the camera class

>> Add a level
> Update the variable in GameEnvironment.cs - 21
> add the file
> add a row to levelstatus

>> Level.cs - 10
> get the width and height of the level beforehand
> we do this so we can align background objects
> this change is also reflected later on in the constructor

>> LevelLoading.cs - 48
> load the width and height of the current file

>> GameEnvironment.cs - 151
> change the background color to the color of the sky

>> GameEnvironment.cs - 21
> variable to keep track of the total amount of levels

>> GameEnvironment.cs - 116
> Let the camera stay at the current position while in the GameOver or FinishedLevel state.

>> GameObject.cs 
> Added an IsUI boolean to keep track of if the object is an ui element and needs to stay fixed

>> SpriteGameObject.cs - 30
> Changed the drawing function if the object is an UI object

>> TextGameObject.cs - 21
> Changed the drawing function if the object is an UI object

>> Level.cs
> Changed relevant objects part of the ui (33, 37, 42)

>> LevelLoading.cs
> Changed relevant objects part of the ui (24, 28)

>> LevelMenuState.cs
> let the camera know the current level

>> TickTick.cs
> sound be gone

>> SpriteGameObject.cs - 37
> added the parallax offset in the drawing function

>> Level.cs - 26
> made the mountain generate a random parallax speed

>> LevelFinishedState.cs, GameOverState.cs  - 14
> made it ui

>> GameObject.cs - 40
> added an overload for the reset method, so the rocket class can have a 'soft-reset', this just makes it so 
> the rocket class has different behaviour if the game is gameover or if the player jumped on the rocket.

>> Rocket.cs
> added a variable to keep track of if the rocket is 'dead' (has been jumped on)
> Updated the reset method so it can have different behaviour if it is a soft reset or not
> in CheckPlayerCollision -> if the player hits the rocket from above, make the rocket dead and let the character jump.

>> GameObject.cs
> added an overload for the reset method, so the timer can have a custom value, instead of just the default 30.

>> TimerGameObject.cs
> changed the reset method so that it accepts a custom value for the time

>> Level.cs
> pass the timer object as reference to the LoadLevel method

>> LevelLoading.cs - 37
> check if the 2nd timer parameter exists at the last line of the file, which would be our time parameter.
> if it exists, set the timer to that value

>> LevelLoading.cs
> added the two tiles to the levelloading

>> Player.cs
> changed the walkspeed if the player is on the tiles

>> PlayerPhysics.cs
> changed the variables if the player is standing ontop of the slow or speed tiles

>> Tile.cs
> added the variables to the tile class